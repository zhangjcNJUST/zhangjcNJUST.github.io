<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhangjc</title>
  
  <subtitle>zhang_j_c@qq.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-08T12:28:25.839Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhangjc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>STL 学习</title>
    <link href="http://yoursite.com/2020/02/07/stl/"/>
    <id>http://yoursite.com/2020/02/07/stl/</id>
    <published>2020-02-07T07:51:10.000Z</published>
    <updated>2020-02-08T12:28:25.839Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><p>STL基本概念：标准模板库，广义上分为容器、算法、迭代器</p><p>STL六大组件：容器、算法、迭代器、仿函数、适配器、空间配置器</p><p>容器：各种数据结构，vector、list…</p><p>算法：各种常用算法：sort、find、copy…</p><p>迭代器：</p><p>仿函数：</p><p>适配器：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;STL基本概念：标准模板库，广义上分为容器、算法、迭代器&lt;/p&gt;
&lt;p&gt;STL六大组件：容器、算法、迭代器、仿函数、适配器、空间配置器&lt;/p&gt;
&lt;p&gt;容器：各种数据结构，vector、list…&lt;/p&gt;
&lt;p&gt;算法：各种常用算法：sort、find、c
      
    
    </summary>
    
    
      <category term="工具学习" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="STL" scheme="http://yoursite.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>docker 学习</title>
    <link href="http://yoursite.com/2020/02/05/docker/"/>
    <id>http://yoursite.com/2020/02/05/docker/</id>
    <published>2020-02-05T07:33:09.000Z</published>
    <updated>2020-02-14T09:22:04.578Z</updated>
    
    <content type="html"><![CDATA[<p>参考：深入浅出docker</p><h1 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h1><p><img src="/2020/02/05/docker/image-20200214161141013.png" alt="image-20200214161141013"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure><p>过滤ls返回内容  —filter</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls --filter dangling=true</span><br></pre></td></tr></table></figure><p>dangling：true和false，返回悬虚镜像或者非悬虚镜像</p><p>before:加镜像名称或ID，返回在这之前被创建的全部镜像</p><p>since:同上，返回这之后被创建的全部镜像</p><p>label:根据label名称或值对镜像进行过滤</p><p>使用reference</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls --filter=reference="*:latest"</span><br></pre></td></tr></table></figure><p>—format 对输出内容格式化</p><p>拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image pull ubuntu:latest</span><br></pre></td></tr></table></figure><p>镜像仓库  默认Docker Hub</p><p>搜索docker hub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search</span><br></pre></td></tr></table></figure><p>镜像命名和标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image pull &lt;repository&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure><p>查看镜像分层</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image inspect ubuntu:latest</span><br></pre></td></tr></table></figure><p>删除镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image rm 0233123(id)</span><br></pre></td></tr></table></figure><p>删除全部镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image rm $(docker image ls -q) -f</span><br></pre></td></tr></table></figure><h1 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h1><p>容器 vs 虚拟机</p><p><img src="/2020/02/05/docker/image-20200214162510509.png" alt="image-20200214162510509"></p><p><img src="/2020/02/05/docker/image-20200214162522256.png" alt="image-20200214162522256"></p><p>检查docker daemon 状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>若无权限访问，加sudo或加入当前用户到docker组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -aG docker &lt;user&gt;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service docker status</span><br><span class="line">systemctl is-activate docker</span><br></pre></td></tr></table></figure><p>启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run -it ubuntu:latest /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run --name a -it ubuntu:latest /bin/bash</span><br></pre></td></tr></table></figure><p>格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run &lt;options&gt; &lt;image&gt;:&lt;tag&gt; &lt;app&gt;</span><br></pre></td></tr></table></figure><p><code>ctrl+p+q</code>退出但不终止容器</p><p>重连到容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container exec -it 3207eb124 bash</span><br></pre></td></tr></table></figure><p>确认容器状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container ps</span><br></pre></td></tr></table></figure><p>停止删除容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker container stop 30232&lt;name or id&gt;</span><br><span class="line">docker container rm 30232</span><br></pre></td></tr></table></figure><p>启动已stop的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container start &lt;&gt;</span><br></pre></td></tr></table></figure><p>利用重启策略进行容器的自我修复</p><p>作为参数传入run 命令或者写入compose文件</p><p>always：除非容器被明确停止，一直尝试重启、当daemon重启时，停止的容器也重启</p><p>unless-stopped：与always区别，不会在daemon重启时重启(<code>systemlctl restart docker</code>) </p><p>on-failed：退出容器且返回值不是0的时候重启容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run -d --name always --restart always alpine sleep 1d</span><br></pre></td></tr></table></figure><p>查看容器详情</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container inspect</span><br></pre></td></tr></table></figure><p>快速清理所有容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container rm $(docker container ls -aq) -f</span><br></pre></td></tr></table></figure><h1 id="应用的容器化"><a href="#应用的容器化" class="headerlink" title="应用的容器化"></a>应用的容器化</h1><p>基本过程</p><p><img src="/2020/02/05/docker/image-20200214164637940.png" alt="image-20200214164637940"></p><ul><li>编写应用代码</li><li>创建Dockerfile文件</li><li>对该Dockerfile执行<code>docker image build</code></li><li>等待Docker将应用程序构建到Docker镜像中</li></ul><p>Dockerfile:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine <span class="comment">#指定基础镜像</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer = <span class="string">"xxx@sss.com"</span> <span class="comment">#指定当前镜像维护者</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add --update nodejs nodejs-npm <span class="comment">#按照nodejs nodejs-npm到当前镜像中</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /src </span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /src</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span> <span class="comment">#设置相应端口</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"node"</span>, <span class="string">"./app.js"</span>] <span class="comment">#指定当前对象的入口程序</span></span></span><br></pre></td></tr></table></figure><p>注释以#开头</p><p>其他dockerfile指令：LABEL ENV ONBUILD HEALTHCHECK CMD等</p><p>指令格式 指令不区分大小写，一般大写</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSTRUCTION argument</span><br></pre></td></tr></table></figure><p><code>FROM</code> <code>RUN</code> <code>COPY</code>会创建新的镜像层</p><p>如果指令的作用是向镜像中增添新的文件或者程序，这条指令就会新建镜像层；</p><p>如果只是告诉docker如何完成构建或者如何运行应用程序，只会增加镜像的元数据、</p><p>docker镜像体积应尽量小</p><p><code>RUN</code>指令会新增一个镜像层，因此，通过使用<code>&amp;&amp;</code>连接多个命令以及使用<code>\</code>换行，将多个命令包含在一个<code>RUN</code>指令中。</p><p>构建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image build -t web:latest .</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run -d --name c -p 80:8080 web:latest</span><br></pre></td></tr></table></figure><p>多阶段构建</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:latest AS storefront <span class="comment">#阶段0 拉去node:latest </span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/atsea/app/react-app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> react-app .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> maven:latest AS appserver <span class="comment">#阶段1</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/atsea</span></span><br><span class="line"><span class="keyword">copy</span><span class="bash"> pom.xml .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mvn -B -f pom.xml -s /usr/share/maven/ref/settings-docker.xml ???</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mvn ????</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-jdk-apline AS production <span class="comment">#阶段2</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> adduser -Dh /home/grodon grodon</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /static</span></span><br><span class="line"><span class="comment">#从之前阶段构建的镜像中仅复制生产环境相关的应用代码</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=storefront /usr/src/atsea/app/react-app/build .</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=appserver /usr/src/atsea/target/AtSea-0.0.1-SNAPSHOT.jar .</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/app/Atsea-0.0.1-SNAPSHOT.jar"</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"--spring.profiles.active=postgres"</span>]</span></span><br></pre></td></tr></table></figure><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><p>在Docker节点上，以单引擎模式进行多容器应用的部署和管理</p><p>待续……</p><h1 id="Docker-Stack"><a href="#Docker-Stack" class="headerlink" title="Docker Stack"></a>Docker Stack</h1><p>以Swarm模式对Docker节点上的多容器应用进行部署和管理</p><p>待续……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考：深入浅出docker&lt;/p&gt;
&lt;h1 id=&quot;Docker-镜像&quot;&gt;&lt;a href=&quot;#Docker-镜像&quot; class=&quot;headerlink&quot; title=&quot;Docker 镜像&quot;&gt;&lt;/a&gt;Docker 镜像&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2020/02/05
      
    
    </summary>
    
    
      <category term="工具学习" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>bazel学习</title>
    <link href="http://yoursite.com/2020/02/03/bazel/"/>
    <id>http://yoursite.com/2020/02/03/bazel/</id>
    <published>2020-02-03T01:03:09.000Z</published>
    <updated>2020-02-08T08:36:22.552Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><p><a href="https://docs.bazel.build/versions/master/tutorial/cpp.html" target="_blank" rel="noopener">Introduction to Bazel: Building a C++ Project</a> </p><p><a href="https://docs.bazel.build/versions/master/external.html" target="_blank" rel="noopener">Working with external dependencies</a></p><h1 id="1-Cpp-turorial"><a href="#1-Cpp-turorial" class="headerlink" title="1. Cpp-turorial"></a>1. Cpp-turorial</h1><p><img src="/2020/02/03/bazel/image-20200208150619959.png" alt="image-20200208150619959"></p><h2 id="1-1-Set-workspace"><a href="#1-1-Set-workspace" class="headerlink" title="1.1 Set workspace"></a>1.1 Set workspace</h2><p> A workspace is a directory that holds your project’s source files and Bazel’s build outputs.</p><p> It also contains files that Bazel recognizes as special:</p><ul><li>WORKSPACE文件，放在项目根目录下</li><li>BUILD文件，tell Bazel how to build different parts of the project. WORKSPACE中一个包含BUILD文件的目录是一个package.</li></ul><h2 id="1-2-BUILD-file"><a href="#1-2-BUILD-file" class="headerlink" title="1.2 BUILD file"></a>1.2 BUILD file</h2><p> A <code>BUILD</code> file contains several different types of instructions for Bazel.</p><p>The most important type is the <em>build rule</em>, which tells Bazel how to build the desired outputs, such as executable binaries or libraries. </p><p> Each instance of a build rule in the <code>BUILD</code> file is called a <em>target</em> and points to a specific set of source files and dependencies. A target can also point to other targets.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cc_binary(</span><br><span class="line">    name = &quot;hello-world&quot;,</span><br><span class="line">    srcs = [&quot;hello-world.cc&quot;],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><a href="https://docs.bazel.build/versions/master/be/c-cpp.html#cc_binary" target="_blank" rel="noopener"><code>cc_binary</code> rule</a></p><p>The rule tells Bazel to build a self-contained executable binary from the <code>hello-world.cc</code> source file with no dependencies.</p><h2 id="1-3-Build-the-project"><a href="#1-3-Build-the-project" class="headerlink" title="1.3 Build the project"></a>1.3 Build the project</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bazel build //main:hello-world</span><br></pre></td></tr></table></figure><p><code>//main:</code>  target label</p><p>build outputs in bazel-in directory</p><h2 id="1-4-Review-the-dependency-graph"><a href="#1-4-Review-the-dependency-graph" class="headerlink" title="1.4 Review the dependency graph"></a>1.4 Review the dependency graph</h2><p>generate a text representation</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bazel query --notool_deps --noimplicit_deps 'deps(//main:hello-world)' \</span><br><span class="line">  --output graph</span><br></pre></td></tr></table></figure><p>paste the text into GraphViz.</p><p>install GraphViz and xdot Dot Viewer</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install graphviz xdot</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xdot &lt;(bazel query --notool_deps --noimplicit_deps 'deps(//main:hello-world)' \</span><br><span class="line">  --output graph)</span><br></pre></td></tr></table></figure><h2 id="1-5-Multiple-build-targets"><a href="#1-5-Multiple-build-targets" class="headerlink" title="1.5 Multiple build targets"></a>1.5 Multiple build targets</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cc_library(</span><br><span class="line">    name = &quot;hello-greet&quot;,</span><br><span class="line">    srcs = [&quot;hello-greet.cc&quot;],</span><br><span class="line">    hdrs = [&quot;hello-greet.h&quot;],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cc_binary(</span><br><span class="line">    name = &quot;hello-world&quot;,</span><br><span class="line">    srcs = [&quot;hello-world.cc&quot;],</span><br><span class="line">    deps = [</span><br><span class="line">        &quot;:hello-greet&quot;,</span><br><span class="line">    ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>first builds the <code>hello-greet</code> library (using Bazel’s built-in <a href="https://docs.bazel.build/versions/master/be/c-cpp.html#cc_library" target="_blank" rel="noopener"><code>cc_library</code> rule</a>)</p><p>then the <code>hello-world</code> binary</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bazel build //main:hello-world</span><br></pre></td></tr></table></figure><p><img src="/2020/02/03/bazel/image-20200208154634444.png" alt="image-20200208154634444"></p><h2 id="1-6-Multiple-packages"><a href="#1-6-Multiple-packages" class="headerlink" title="1.6 Multiple packages"></a>1.6 Multiple packages</h2><p><img src="/2020/02/03/bazel/image-20200208154718695.png" alt="image-20200208154718695"></p><p>lib/BUILD file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cc_library(</span><br><span class="line">    name = &quot;hello-time&quot;,</span><br><span class="line">    srcs = [&quot;hello-time.cc&quot;],</span><br><span class="line">    hdrs = [&quot;hello-time.h&quot;],</span><br><span class="line">    visibility = [&quot;//main:__pkg__&quot;],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>make the <code>//lib:hello-time</code> target in <code>lib/BUILD</code> explicitly visible to targets in <code>main/BUILD</code> using the <code>visibility</code> attribute.</p><p> This is because by default targets are only visible to other targets in the same <code>BUILD</code> file. (Bazel uses target visibility to prevent issues such as libraries containing implementation details leaking into public APIs.)</p><p>main/BUILD file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cc_library(</span><br><span class="line">    name = &quot;hello-greet&quot;,</span><br><span class="line">    srcs = [&quot;hello-greet.cc&quot;],</span><br><span class="line">    hdrs = [&quot;hello-greet.h&quot;],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cc_binary(</span><br><span class="line">    name = &quot;hello-world&quot;,</span><br><span class="line">    srcs = [&quot;hello-world.cc&quot;],</span><br><span class="line">    deps = [</span><br><span class="line">        &quot;:hello-greet&quot;,</span><br><span class="line">        &quot;//lib:hello-time&quot;,</span><br><span class="line">    ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="/2020/02/03/bazel/image-20200208155111217.png" alt="image-20200208155111217"></p><h2 id="1-7-Using-labels-to-reference-targets"><a href="#1-7-Using-labels-to-reference-targets" class="headerlink" title="1.7 Using labels to reference targets"></a>1.7 Using labels to reference targets</h2><p>In <code>BUILD</code> files and at the command line, Bazel uses <em>labels</em> to reference targets - for example, <code>//main:hello-world</code> or <code>//lib:hello-time</code>. </p><p>Their syntax is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//path/to/package:target-name</span><br></pre></td></tr></table></figure><h1 id="2-Working-with-external-dependencies"><a href="#2-Working-with-external-dependencies" class="headerlink" title="2. Working with external dependencies"></a>2. Working with external dependencies</h1><p>depend on targets from other projects.</p><h2 id="2-1-Depending-on-other-Bazel-projects"><a href="#2-1-Depending-on-other-Bazel-projects" class="headerlink" title="2.1 Depending on other Bazel projects"></a>2.1 Depending on other Bazel projects</h2><p>use <a href="http://docs.bazel.build/be/workspace.html#local_repository" target="_blank" rel="noopener"><code>local_repository</code></a>, <a href="https://docs.bazel.build/versions/master/repo/git.html#git_repository" target="_blank" rel="noopener"><code>git_repository</code></a> or <a href="https://docs.bazel.build/versions/master/repo/http.html#http_archive" target="_blank" rel="noopener"><code>http_archive</code></a> to symlink it from the local filesystem, reference a git repository or download it (respectively)</p><p>example（add to WORKSPACE）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">local_repository(</span><br><span class="line">    name = &quot;coworkers_project&quot;,</span><br><span class="line">    path = &quot;/path/to/coworkers-project&quot;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="2-2-Depending-on-non-Bazel-projects"><a href="#2-2-Depending-on-non-Bazel-projects" class="headerlink" title="2.2 Depending on non-Bazel projects"></a>2.2 Depending on non-Bazel projects</h2><p> prefixed with <code>new_</code> , e.g. <a href="http://docs.bazel.build/be/workspace.html#new_local_repository" target="_blank" rel="noopener"><code>new_local_repository</code></a></p><p>example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new_local_repository(</span><br><span class="line">    name = &quot;coworkers_project&quot;,</span><br><span class="line">    path = &quot;/path/to/coworkers-project&quot;,</span><br><span class="line">    build_file = &quot;coworker.BUILD&quot;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>build_file</code> specifies a BUILD file to overlay on the existing project</p><p>example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cc_library(</span><br><span class="line">    name = &quot;some-lib&quot;,</span><br><span class="line">    srcs = glob([&quot;**&quot;]),</span><br><span class="line">    visibility = [&quot;//visibility:public&quot;],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p> then depend on <code>@coworkers_project//:some-lib</code> from your project’s BUILD files</p><h2 id="2-3-Fetching-dependencies"><a href="#2-3-Fetching-dependencies" class="headerlink" title="2.3 Fetching dependencies"></a>2.3 Fetching dependencies</h2><p>By default, external dependencies are fetched as needed during <code>bazel build</code>.</p><p>If you would like to prefetch the dependencies needed for a specific set of targets, use <a href="https://docs.bazel.build/versions/master/command-line-reference.html#commands" target="_blank" rel="noopener"><code>bazel fetch</code></a>. </p><p>To unconditionally fetch all external dependencies, use <a href="https://docs.bazel.build/versions/master/command-line-reference.html#commands" target="_blank" rel="noopener"><code>bazel sync</code></a>. </p><p>As fetched repositories are <a href="https://docs.bazel.build/versions/master/external.html#layout" target="_blank" rel="noopener">stored in the output base</a>, fetching happens per workspace.</p><h2 id="2-4-Caching-of-external-dependencies"><a href="#2-4-Caching-of-external-dependencies" class="headerlink" title="2.4 Caching of external dependencies"></a>2.4 Caching of external dependencies</h2><p>By default, Bazel will only re-download external dependencies if their definition changes. </p><p>Changes to files referenced in the definition (e.g., patches or <code>BUILD</code> files) are also taken into account by bazel.</p><p>To force a re-download, use <code>bazel sync</code></p><p>External dependencies are all downloaded to a directory under the subdirectory <code>external</code> in the <a href="https://docs.bazel.build/versions/master/output_directories.html" target="_blank" rel="noopener">output base</a></p><p>In case of a <a href="https://docs.bazel.build/versions/master/be/workspace.html#local_repository" target="_blank" rel="noopener">local repository</a>, a symlink is created there instead of creating a new directory.</p><p>see the <code>external</code> directory by running:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls $(bazel info output_base)/external</span><br></pre></td></tr></table></figure><h2 id="2-5-Offline-build"><a href="#2-5-Offline-build" class="headerlink" title="2.5 Offline build"></a>2.5 Offline build</h2><p><a href="https://docs.bazel.build/versions/master/external.html#fetching-dependencies" target="_blank" rel="noopener">prefetching</a> the needed repositories with <code>bazel fetch</code> or <code>bazel sync</code> can be enough;</p><p> moreover, the using the option <code>--nofetch</code>, fetching of further repositories can be disabled during the build.</p><p>For true offline builds, where the providing of the needed files is to be done by an entity different from bazel, bazel supports the option <code>--distdir</code>. Whenever a repository rule asks bazel to fetch a file via <a href="https://docs.bazel.build/versions/master/skylark/lib/repository_ctx.html#download" target="_blank" rel="noopener"><code>ctx.download</code></a> or <a href="https://docs.bazel.build/versions/master/skylark/lib/repository_ctx.html#download_and_extract" target="_blank" rel="noopener"><code>ctx.download_and_extract</code></a> and provides a hash sum of the file needed, bazel will first look into the directories specified by that option for a file matching the basename of the first URL provided, and use that local copy if the hash matches.</p><p>However, bazel allows the execution of arbitrary commands in repository rules, without knowing if they call out to the network. Therefore, bazel has no option to enforce builds being fully offline. So testing if a build works correctly offline requires external blocking of the network, as bazel does in its bootstrap test.</p><h2 id="2-6-Best-practices"><a href="#2-6-Best-practices" class="headerlink" title="2.6 Best practices"></a>2.6 Best practices</h2><ul><li>Prefer <a href="https://docs.bazel.build/versions/master/repo/http.html#http_archive" target="_blank" rel="noopener"><code>http_archive</code></a> to <code>git_repository</code> and <code>new_git_repository</code>.</li><li>Do not use <code>bind()</code>. </li><li>Avoid using <code>repository_ctx.execute</code> when possible.when using a non-Bazel C++ library that has a build using Make, it is preferable to use <code>repository_ctx.download()</code> and then write a BUILD file that builds it, instead of running <code>ctx.execute([&quot;make&quot;])</code>.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.bazel.build/versions/master/tutorial/cpp.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Introduction to Bazel: Bui
      
    
    </summary>
    
    
      <category term="工具学习" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="bazel" scheme="http://yoursite.com/tags/bazel/"/>
    
  </entry>
  
  <entry>
    <title>proj2img</title>
    <link href="http://yoursite.com/2020/02/03/proj2img/"/>
    <id>http://yoursite.com/2020/02/03/proj2img/</id>
    <published>2020-02-03T01:02:53.000Z</published>
    <updated>2020-02-03T01:02:53.201Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>pointgrid</title>
    <link href="http://yoursite.com/2020/02/03/pointgrid/"/>
    <id>http://yoursite.com/2020/02/03/pointgrid/</id>
    <published>2020-02-03T01:02:41.000Z</published>
    <updated>2020-02-03T01:02:41.897Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>protocol buffers学习</title>
    <link href="http://yoursite.com/2020/02/02/protobuf/"/>
    <id>http://yoursite.com/2020/02/02/protobuf/</id>
    <published>2020-02-02T07:39:25.000Z</published>
    <updated>2020-02-02T09:26:36.218Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noopener">Protocol Buffers</a></p><h1 id="1-什么是protocol-buffers"><a href="#1-什么是protocol-buffers" class="headerlink" title="1. 什么是protocol buffers"></a>1. 什么是protocol buffers</h1><p> a flexible, efficient, automated mechanism for serializing structured data – think XML</p><p>smaller、faster、simpler</p><h1 id="2-怎样工作"><a href="#2-怎样工作" class="headerlink" title="2. 怎样工作"></a>2. 怎样工作</h1><p>通过.proto文件定义protocol buffer 消息类型</p><p>一个person消息的样例:</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">required</span> <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">required</span> <span class="built_in">int32</span> id = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">optional</span> <span class="built_in">string</span> email = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">PhoneType</span></span>&#123;</span><br><span class="line">MOBILE = <span class="number">0</span>;</span><br><span class="line">HOME = <span class="number">1</span>;</span><br><span class="line">WORK = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">PhoneNumber</span></span>&#123;</span><br><span class="line"><span class="keyword">required</span> <span class="built_in">string</span> number = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">optional</span> PhoneType type = <span class="number">2</span>[defalt = HOME];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">required</span> PhoneNumber phone = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行编译器后生成一个Person类，可以在代码中使用,如下(c++为例)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// write</span></span><br><span class="line">Person person;</span><br><span class="line">person.set_name(<span class="string">"zhangjc"</span>);</span><br><span class="line">person.set_id(<span class="number">1234</span>);</span><br><span class="line">person.set_email(<span class="string">"zhangjc_qq.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">fstream <span class="title">output</span><span class="params">(<span class="string">"myfile"</span>, ios::out | ios::binary)</span></span>;</span><br><span class="line">person.SerializeToOstream(&amp;output);</span><br><span class="line"></span><br><span class="line"><span class="comment">// read</span></span><br><span class="line"><span class="function">fstream <span class="title">input</span><span class="params">(<span class="string">"myfile"</span>, ios::in | ios::binary)</span></span>;</span><br><span class="line">Person person;</span><br><span class="line">person.ParseFromIstream(&amp;input);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Name:"</span> &lt;&lt; person.name() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"id:"</span> &lt;&lt; person.id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"email:"</span> &lt;&lt; person.email() &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h1 id="3-如何定义proto-消息"><a href="#3-如何定义proto-消息" class="headerlink" title="3. 如何定义proto 消息"></a>3. 如何定义proto 消息</h1><p><strong>Prefer Proto3</strong> While <code>proto2</code> will continue to be supported, we encourage new code to use <code>proto3</code> instead, which is easier to use and supports more languages.</p><h2 id="3-1-proto2"><a href="#3-1-proto2" class="headerlink" title="3.1 proto2"></a>3.1 proto2</h2><p>fields：键-值对，如<code>required string name = 1;</code> </p><p>field numbers：消息定义中的每一个field有一个独一无二的号码，一旦使用不修改，范围1-536,870,911($2^{29}-1$ )，其中19000-19999不能使用。</p><p>field rules：</p><ul><li>required：必须有一个</li><li>optional：有0各或一个，当没有时，将使用默认值，默认值可以在文件中定义，未定义时，根据不同的类型使用不同的默认值，strings-&gt;empty string,bytes-&gt;empty byte string,bools-&gt;false,numeric -&gt; zero, enums-&gt;first value listed in the enum’s type definition</li></ul><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">optional</span> <span class="built_in">int32</span> result_per_page = <span class="number">3</span> [default = <span class="number">10</span>];</span><br></pre></td></tr></table></figure><ul><li>repeated：可以有任意个(包括0)</li></ul><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">repeated</span> <span class="built_in">int32</span> samples = <span class="number">4</span>[packed = <span class="literal">true</span>];</span><br></pre></td></tr></table></figure><p>一个.proto文件中可以定义多个消息类型。</p><p>.proto文件中的注释：与C/C++中一样</p><p>reserved field：防止某些删除了的field number被重新定义，加载旧版本时出问题，example:</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Foo</span></span>&#123;</span><br><span class="line">reserved <span class="number">2</span>,<span class="number">15</span>,<span class="number">9</span> to <span class="number">11</span>;</span><br><span class="line">reserved <span class="string">"foo"</span>, <span class="string">"bar"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>.proto文件编译后生成什么：</p><ul><li>C++: .h和.cc文件，每个消息类型生成一个类</li><li>Python：generates a module with a static descriptor of each message type in your <code>.proto</code>, which is then used with a <em>metaclass</em> to create the necessary Python data access class at runtime.</li></ul><p>可以定义的标量类型：</p><div class="table-container"><table><thead><tr><th style="text-align:left">.proto Type</th><th style="text-align:left">Notes</th><th style="text-align:left">C++ Type</th><th style="text-align:left">Java Type</th><th style="text-align:left">Python Type[2]</th><th style="text-align:center">Go Type</th></tr></thead><tbody><tr><td style="text-align:left">double</td><td style="text-align:left"></td><td style="text-align:left">double</td><td style="text-align:left">double</td><td style="text-align:left">float</td><td style="text-align:center">*float64</td></tr><tr><td style="text-align:left">float</td><td style="text-align:left"></td><td style="text-align:left">float</td><td style="text-align:left">float</td><td style="text-align:left">float</td><td style="text-align:center">*float32</td></tr><tr><td style="text-align:left">int32</td><td style="text-align:left">Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead.</td><td style="text-align:left">int32</td><td style="text-align:left">int</td><td style="text-align:left">int</td><td style="text-align:center">*int32</td></tr><tr><td style="text-align:left">int64</td><td style="text-align:left">Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead.</td><td style="text-align:left">int64</td><td style="text-align:left">long</td><td style="text-align:left">int/long[3]</td><td style="text-align:center">*int64</td></tr><tr><td style="text-align:left">uint32</td><td style="text-align:left">Uses variable-length encoding.</td><td style="text-align:left">uint32</td><td style="text-align:left">int[1]</td><td style="text-align:left">int/long[3]</td><td style="text-align:center">*uint32</td></tr><tr><td style="text-align:left">uint64</td><td style="text-align:left">Uses variable-length encoding.</td><td style="text-align:left">uint64</td><td style="text-align:left">long[1]</td><td style="text-align:left">int/long[3]</td><td style="text-align:center">*uint64</td></tr><tr><td style="text-align:left">sint32</td><td style="text-align:left">Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s.</td><td style="text-align:left">int32</td><td style="text-align:left">int</td><td style="text-align:left">int</td><td style="text-align:center">*int32</td></tr><tr><td style="text-align:left">sint64</td><td style="text-align:left">Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s.</td><td style="text-align:left">int64</td><td style="text-align:left">long</td><td style="text-align:left">int/long[3]</td><td style="text-align:center">*int64</td></tr><tr><td style="text-align:left">fixed32</td><td style="text-align:left">Always four bytes. More efficient than uint32 if values are often greater than 228.</td><td style="text-align:left">uint32</td><td style="text-align:left">int[1]</td><td style="text-align:left">int/long[3]</td><td style="text-align:center">*uint32</td></tr><tr><td style="text-align:left">fixed64</td><td style="text-align:left">Always eight bytes. More efficient than uint64 if values are often greater than 256.</td><td style="text-align:left">uint64</td><td style="text-align:left">long[1]</td><td style="text-align:left">int/long[3]</td><td style="text-align:center">*uint64</td></tr><tr><td style="text-align:left">sfixed32</td><td style="text-align:left">Always four bytes.</td><td style="text-align:left">int32</td><td style="text-align:left">int</td><td style="text-align:left">int</td><td style="text-align:center">*int32</td></tr><tr><td style="text-align:left">sfixed64</td><td style="text-align:left">Always eight bytes.</td><td style="text-align:left">int64</td><td style="text-align:left">long</td><td style="text-align:left">int/long[3]</td><td style="text-align:center">*int64</td></tr><tr><td style="text-align:left">bool</td><td style="text-align:left"></td><td style="text-align:left">bool</td><td style="text-align:left">boolean</td><td style="text-align:left">bool</td><td style="text-align:center">*bool</td></tr><tr><td style="text-align:left">string</td><td style="text-align:left">A string must always contain UTF-8 encoded or 7-bit ASCII text.</td><td style="text-align:left">string</td><td style="text-align:left">String</td><td style="text-align:left">unicode (Python 2) or str (Python 3)</td><td style="text-align:center">*string</td></tr><tr><td style="text-align:left">bytes</td><td style="text-align:left">May contain any arbitrary sequence of bytes.</td><td style="text-align:left">string</td><td style="text-align:left">ByteString</td><td style="text-align:left">bytes</td><td style="text-align:center">[]byte</td></tr></tbody></table></div><p>其他消息类型的使用：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchResponse</span> </span>&#123;</span><br><span class="line">  <span class="keyword">repeated</span> Result result = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">  <span class="keyword">required</span> <span class="built_in">string</span> url = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">optional</span> <span class="built_in">string</span> title = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="built_in">string</span> snippets = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从其他文件中导入</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"myproject/other_protos.proto"</span>;</span><br></pre></td></tr></table></figure><p>嵌套定义</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchResponse</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">message</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="built_in">string</span> url = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">optional</span> <span class="built_in">string</span> title = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">repeated</span> <span class="built_in">string</span> snippets = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">repeated</span> Result result = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SomeOtherMessage</span> </span>&#123;</span><br><span class="line">  <span class="keyword">optional</span> SearchResponse.Result result = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>extension</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  extensions <span class="number">100</span> to <span class="number">199</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再Foo的初始定义中加入了一个bar</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extend Foo &#123;</span><br><span class="line">  <span class="keyword">optional</span> <span class="built_in">int32</span> bar = <span class="number">126</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给extension设置值(c++)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Foo foo;</span><br><span class="line">foo.SetExtension(bar, <span class="number">15</span>);</span><br><span class="line"><span class="comment">//HasExtension(), ClearExtension(), GetExtension,MutableExtension(), and AddExtension()</span></span><br></pre></td></tr></table></figure><p>Oneof：</p><p>Oneof fields are like optional fields except all the fields in a oneof share memory, and at most one field can be set at the same time.</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SampleMessage</span> </span>&#123;</span><br><span class="line">  <span class="keyword">oneof</span> test_oneof &#123;</span><br><span class="line">     <span class="built_in">string</span> name = <span class="number">4</span>; <span class="comment">// 没有 required optional repeated</span></span><br><span class="line">     SubMessage sub_message = <span class="number">9</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>maps, packages ……</p><p>更新一个消息类型：</p><ul><li>不要改变已有filed的number</li><li>新加的field必须是optional或repeated</li><li>除required的field外可以删除，但是它的field number不能再被使用</li><li>只要类型和number保持不变，非requried的field可以变为extension和vice versa</li><li>int32、uint32、int64、uint64、bool互相兼容</li><li>sint32和sint64互相兼容</li><li>string 和bytes互相兼容只要bytes是有效的UTF-8</li><li>fixed32-&gt;sfixed32</li><li>fixed64-&gt;sfixed64</li><li>optional-&gt;repeated</li><li>可以改变默认值</li><li>enum -&gt; int32 uint32 int64 uint64</li><li>optional -&gt; oneof</li></ul><h2 id="3-2-proto3"><a href="#3-2-proto3" class="headerlink" title="3.2 proto3"></a>3.2 proto3</h2><p>example:</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchRequest</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> query = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int32</span> page_number = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">int32</span> result_per_page = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>field rules:</p><ul><li>singular：默认，zero or one</li><li>repeated：any number of times</li></ul><h2 id="3-3-style"><a href="#3-3-style" class="headerlink" title="3.3 style"></a>3.3 style</h2><ul><li>每一行最多80个字符</li><li>两个空格进行缩进</li><li>文件命名：lower_snake_case.proto</li><li>文件结构：<ul><li>License header (if applicable)</li><li>File overview</li><li>Syntax</li><li>Package</li><li>Imports (sorted)</li><li>File options</li><li>Everything else</li></ul></li><li>package name 小写，与目录结构对应my/package -&gt; my.package</li><li>message，CamelCase; field, underscore_separated_names;</li><li>repeated field用复数，如 repeated string keys  = 1；</li><li>Enums, CamelCase</li><li>Services, CamelCase</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考：&lt;a href=&quot;https://developers.google.com/protocol-buffers&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Protocol Buffers&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-什么是protocol
      
    
    </summary>
    
    
      <category term="工具学习" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="protocol buffers" scheme="http://yoursite.com/tags/protocol-buffers/"/>
    
  </entry>
  
  <entry>
    <title>点云投影(2)--投影到圆柱展开面</title>
    <link href="http://yoursite.com/2020/01/31/projection2/"/>
    <id>http://yoursite.com/2020/01/31/projection2/</id>
    <published>2020-01-31T08:20:27.000Z</published>
    <updated>2020-02-02T09:18:26.473Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="激光雷达" scheme="http://yoursite.com/categories/%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE/"/>
    
    
      <category term="LiDAR" scheme="http://yoursite.com/tags/LiDAR/"/>
    
  </entry>
  
  <entry>
    <title>点云投影(1)--投影到XY平面(鸟瞰图)</title>
    <link href="http://yoursite.com/2020/01/31/projection1/"/>
    <id>http://yoursite.com/2020/01/31/projection1/</id>
    <published>2020-01-31T07:33:01.000Z</published>
    <updated>2020-01-31T08:14:45.257Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://blog.csdn.net/qq_33801763/article/details/78923310" target="_blank" rel="noopener">处理点云数据(一)：点云与生成鸟瞰图</a></p><h1 id="1-图像坐标系与激光雷达坐标系"><a href="#1-图像坐标系与激光雷达坐标系" class="headerlink" title="1. 图像坐标系与激光雷达坐标系"></a>1. 图像坐标系与激光雷达坐标系</h1><p><img src="/2020/01/31/projection1/1.png" alt="1" style="zoom: 33%;"></p><p>图像坐标系：</p><ul><li>原点左上角</li><li>坐标值都为正</li><li>坐标值都是整数</li></ul><p><img src="/2020/01/31/projection1/2.png" alt="2" style="zoom:33%;"></p><p>点云坐标系：</p><ul><li>左方为Y轴正方向、前方为X轴正方向、上方为Z轴正方向</li><li>坐标值有正有负</li><li>坐标值为实数</li></ul><h1 id="2-创建鸟瞰图投影"><a href="#2-创建鸟瞰图投影" class="headerlink" title="2. 创建鸟瞰图投影"></a>2. 创建鸟瞰图投影</h1><h2 id="2-1-选择投影区域"><a href="#2-1-选择投影区域" class="headerlink" title="2.1 选择投影区域"></a>2.1 选择投影区域</h2><p>一般情况下，只关注车体附近一定范围内的点云，无需对所有点云进行处理，本文选择车身左右各10m，车后20m，车前40m作为感兴趣区域。</p><h2 id="2-2-设置投影分辨率"><a href="#2-2-设置投影分辨率" class="headerlink" title="2.2 设置投影分辨率"></a>2.2 设置投影分辨率</h2><p>设置每个像素所代表的区域范围，本文设置分辨率res为0.05m，则生成投影图的高度为$ 60 / 0.05 = 1200$，宽度为$20 / 0.05 = 400$。</p><h2 id="2-3-将每个点映射到像素位置"><a href="#2-3-将每个点映射到像素位置" class="headerlink" title="2.3 将每个点映射到像素位置"></a>2.3 将每个点映射到像素位置</h2><p>映射公式：</p><script type="math/tex; mode=display">col = [-y / res] + \lfloor leftoffset / res \rfloor</script><script type="math/tex; mode=display">row = [-x / res] + \lceil forwardoffset / res \rceil</script><p>其中，$leftoffset$和$forwardoffset$为车左方和前方的最大距离，均为正值，目的是是将转换后的原点变为左上角，坐标值都为正。</p><h2 id="2-4-填充像素值"><a href="#2-4-填充像素值" class="headerlink" title="2.4 填充像素值"></a>2.4 填充像素值</h2><p>将所有点的Z值归一化到0-255后，赋值给每个点对应位置的像素值。</p><h1 id="3-可视化结果"><a href="#3-可视化结果" class="headerlink" title="3. 可视化结果"></a>3. 可视化结果</h1><p><img src="/2020/01/31/projection1/3.png" alt="3" style="zoom:200%;"></p><h1 id="4-相关代码"><a href="#4-相关代码" class="headerlink" title="4. 相关代码"></a>4. 相关代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_velodyne_points</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="string">""" load lidar data from .bin file </span></span><br><span class="line"><span class="string">        [https://github.com/hunse/kitti]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    points = np.fromfile(filename, dtype = np.float32).reshape(<span class="number">-1</span>,<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># remove intensity</span></span><br><span class="line">    points = points[:,<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span> points</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    data_file = <span class="string">"./data.bin"</span></span><br><span class="line">    points = load_velodyne_points(data_file)</span><br><span class="line">    <span class="comment">#print(points.shape) #55597*3</span></span><br><span class="line">    <span class="comment">#print(points[:20])</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># choose ROI</span></span><br><span class="line">    <span class="comment"># left 10,right 10,back 20.forward 40</span></span><br><span class="line">    side_range = (<span class="number">-10</span>, <span class="number">10</span>)</span><br><span class="line">    fwd_range = (<span class="number">-20</span>, <span class="number">40</span>)</span><br><span class="line">    </span><br><span class="line">    x_points = points[:, <span class="number">0</span>]</span><br><span class="line">    y_points = points[:, <span class="number">1</span>]</span><br><span class="line">    z_points = points[:, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># filter</span></span><br><span class="line">    side_filter = np.logical_and((y_points &gt; -side_range[<span class="number">1</span>]), (y_points &lt; -side_range[<span class="number">0</span>])) <span class="comment"># left y positive, right y negative</span></span><br><span class="line">    fwd_filter = np.logical_and((x_points &gt; fwd_range[<span class="number">0</span>]), (x_points &lt; fwd_range[<span class="number">1</span>]))</span><br><span class="line">    filter = np.logical_and(side_filter, fwd_filter)</span><br><span class="line">    indices = np.argwhere(filter).flatten()</span><br><span class="line"></span><br><span class="line">    x_points = x_points[indices]</span><br><span class="line">    y_points = y_points[indices]</span><br><span class="line">    z_points = z_points[indices]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(x_points.size)</span></span><br><span class="line">    <span class="comment"># print(y_points.size)</span></span><br><span class="line">    <span class="comment"># print(z_points.size)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># resolution</span></span><br><span class="line">    reso = <span class="number">0.05</span> <span class="comment"># 5cm</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># transfer to image axis</span></span><br><span class="line">    x_img = (-y_points / reso).astype(np.int32)</span><br><span class="line">    y_img = (-x_points / reso).astype(np.int32)</span><br><span class="line">    x_img -= int(np.floor(side_range[<span class="number">0</span>]) / reso)</span><br><span class="line">    y_img += int(np.ceil(fwd_range[<span class="number">1</span>]) / reso)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set height range</span></span><br><span class="line">    height_range = (<span class="number">-2</span>, <span class="number">0.5</span>)</span><br><span class="line">    pixel_val = np.clip(a = z_points, a_min = height_range[<span class="number">0</span>], a_max = height_range[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># scale to 0-255</span></span><br><span class="line">    pixel_val = ((pixel_val - height_range[<span class="number">0</span>]) / float(height_range[<span class="number">1</span>] - height_range[<span class="number">0</span>]) * <span class="number">255</span>).astype(np.uint8)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># initial empty image</span></span><br><span class="line">    x_max = int((side_range[<span class="number">1</span>] - side_range[<span class="number">0</span>]) / reso) + <span class="number">1</span> <span class="comment"># cols</span></span><br><span class="line">    y_max = int((fwd_range[<span class="number">1</span>] - fwd_range[<span class="number">0</span>]) / reso) + <span class="number">1</span> <span class="comment"># rows</span></span><br><span class="line">    img = np.zeros([y_max, x_max], dtype = np.uint8)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fill image with height info</span></span><br><span class="line">    img[y_img, x_img] = pixel_val</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># show image</span></span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考：&lt;a href=&quot;https://blog.csdn.net/qq_33801763/article/details/78923310&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;处理点云数据(一)：点云与生成鸟瞰图&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=
      
    
    </summary>
    
    
      <category term="激光雷达" scheme="http://yoursite.com/categories/%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE/"/>
    
    
      <category term="LiDAR" scheme="http://yoursite.com/tags/LiDAR/"/>
    
  </entry>
  
  <entry>
    <title>论文阅读(2)--PointNet++</title>
    <link href="http://yoursite.com/2020/01/27/pointnet2/"/>
    <id>http://yoursite.com/2020/01/27/pointnet2/</id>
    <published>2020-01-27T12:15:09.000Z</published>
    <updated>2020-01-28T09:35:36.722Z</updated>
    
    <content type="html"><![CDATA[<p>论文链接：<a href="https://papers.nips.cc/paper/7095-pointnet-deep-hierarchical-feature-learning-on-point-sets-in-a-metric-space.pdf" target="_blank" rel="noopener">PointNet++: Deep Hierarchical Feature Learning on Point Sets in a Metric Space</a></p><p>代码：<a href="https://github.com/charlesq34/pointnet2" target="_blank" rel="noopener">tensorflow</a> <a href="https://github.com/erikwijmans/Pointnet2_PyTorch" target="_blank" rel="noopener">pytorch</a></p><h1 id="1-摘要"><a href="#1-摘要" class="headerlink" title="1. 摘要"></a>1. 摘要</h1><p>之前很少有工作研究直接在点集上进行的深度学习，PointNet是这个方向的先驱。但是，PointNet的设计并不能捕获度量空间点的局部结构，限制了它在识别更细密度模式以及概括复杂场景方面的能力。</p><p>在本文中，提出了一种分层的神经网络，该网络在输入点集的嵌套分区中递归地使用PointNet(提取特征)。通过使用度量空间距离，该网络可以随着上下文比例的增加来学习局部特征。通过进一步的观察，点集通常会以不同的密度进行采样，这导致以均匀的密度进行训练的网络性能会大大降低，本文提出了新颖的集合学习层，来自适应的组合来自多个尺度的特征。</p><p>实验表明，本文提出的PointNet++网络能够高效、鲁棒地学习深度点集特征。特别地，在具有挑战性的3D点云基准测试中，取得了远超过state-of-the-art的结果。</p><h1 id="2-网络结构"><a href="#2-网络结构" class="headerlink" title="2. 网络结构"></a>2. 网络结构</h1><p><img src="/2020/01/27/pointnet2/image-20200128161309179.png" alt="image-20200128161309179"></p><p>整体结构如图所示。</p><p>PointNet使用单个的最大池化操作来获得整个点集的信息，本文提出的结构构建了点的层次分组，逐层抽象出越来越大的局部区域，该结构包含一系列的点集抽象层，在每一层，通过处理将点集提取为由更少元素组成的新的集合。该点集抽象层主要由三个关键部分组成：采样层、分组层和PointNet层。</p><ul><li><p>采样层</p><p>采样层从输入的点集中选择一部分点构成子集，作为每个局部区域的中心点，本文中选择点的方法用的是迭代最远点采样(FPS)，即每次从剩下的点中选择距离已选点集最远的点作为新加入的点。</p></li><li><p>组合层</p><p>组合层选择每个中心点近邻的点构建局部区域。近邻点的选择一般有两种方法，第一种是K最近邻(kNN)查找，即选取每个点附近距离最近的K个点，K是一个固定的值；第二种是将点附近一定半径球形区域内的点作为近邻点，即ball query。和kNN相比，ball query的局部近邻保证了固定大小的区域尺度，使得空间的局部区域特征可泛化性更强。</p></li><li><p>PointNet层</p><p>使用一个规模较小的PointNet网络将每个局部区域的特征编码成特征向量。</p></li></ul><p>由于点集在不同区域的分布一般是不均匀的，这种特征是点集特征学习的一个挑战。从密集数据学习的特征可能不能概括稀疏的采样区域，同样，用稀疏点云训练的模型也可能识别不了精细的局部结构。</p><p>为此，本文提出了密度自适应的PointNet层来学习不同尺度区域的联合特征，并将这种使用密度自适应PointNet的层次网络命名为PointNet++。</p><p>在PointNet++中，每个抽象层提取多个尺度的个局部模式，并根据局部点的密度将它们自动结合，本文提出了两种不同的密度自适应层。</p><ul><li><p>Multi-scale grouping(MSG).</p><p><img src="/2020/01/27/pointnet2/image-20200128165447076.png" alt="image-20200128165447076"></p><p>一种简单有效的方法就是使用不同尺度的组合层，再用PointNet提取出各个尺度上的特征，将它们串成一个多尺度的特征，如上图所示。</p><p>该方法计算量较大，因为它对每个采样的中心点都要在多个尺度上运行PointNet提取特征。</p></li><li><p>Multi-resolution grouping(MRG)</p><p><img src="/2020/01/27/pointnet2/image-20200128165957911.png" alt="image-20200128165957911"></p></li></ul><p>  为了减少计算量，本文又提出了MRG方法，在该方法中，对于某个抽象层的区域特征，可以用两个向量的串联来表示，第一个向量通过使用点集抽象层汇总来自较低一级的每个子区域特征得到，第二个向量直接在局部区域的原始点上使用一个PointNet得到。</p><p>  当局部区域的密度比较小时，第二个向量比第一个更值得信赖，因此第二个向量所占的权重应该高一点；反过来，当局部区域密度较高时，第一个向量提供了更详细的信息。</p><h1 id="3-实验"><a href="#3-实验" class="headerlink" title="3. 实验"></a>3. 实验</h1><p>数据集：</p><ul><li>MNIST：手写数字图像，60k用于训练，10k用于测试；</li><li>ModelNet40：40个类别的CAD模型，9843训练，2468测试；</li><li>SHREC15：50个类别的1200个形状，每个类别包含24个形状，采用了5折交叉验证。</li><li>ScanNet：1513个室内扫描场景，1201训练，312测试。</li></ul><h2 id="3-1-欧式度量空间点集分类"><a href="#3-1-欧式度量空间点集分类" class="headerlink" title="3.1 欧式度量空间点集分类"></a>3.1 欧式度量空间点集分类</h2><p>二维使用MINIST数据集，三维使用ModelNet40数据集。</p><p><img src="/2020/01/27/pointnet2/image-20200128172123486.png" alt="image-20200128172123486"></p><p><img src="/2020/01/27/pointnet2/image-20200128172136852.png" alt="image-20200128172136852"></p><p>对于不同采样密度的鲁棒性实验</p><p><img src="/2020/01/27/pointnet2/image-20200128172236570.png" alt="image-20200128172236570"></p><h2 id="3-2-语义场景的点集分割"><a href="#3-2-语义场景的点集分割" class="headerlink" title="3.2 语义场景的点集分割"></a>3.2 语义场景的点集分割</h2><p>数据集：ScanNet</p><p><img src="/2020/01/27/pointnet2/image-20200128172430099.png" alt="image-20200128172430099"></p><p><img src="/2020/01/27/pointnet2/image-20200128172501557.png" alt="image-20200128172501557"></p><h2 id="3-3-非欧式度量空间的点集分类"><a href="#3-3-非欧式度量空间的点集分类" class="headerlink" title="3.3 非欧式度量空间的点集分类"></a>3.3 非欧式度量空间的点集分类</h2><p>数据集：SHREC15</p><p><img src="/2020/01/27/pointnet2/image-20200128172625876.png" alt="image-20200128172625876"></p><p><img src="/2020/01/27/pointnet2/image-20200128172638932.png" alt="image-20200128172638932"></p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>本文在PointNet的基础上提出了分层的网络结构PointNet++，在各个数据集上都取得了较好效果。主要贡献提出对输入点集的嵌套分区，以及对非均匀采样点问题的处理。</p><p>未来，值得思考的是如何在局部区域共享更多计算来提高推理速度，尤其是在MSG和MRG层上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;论文链接：&lt;a href=&quot;https://papers.nips.cc/paper/7095-pointnet-deep-hierarchical-feature-learning-on-point-sets-in-a-metric-space.pdf&quot; target=&quot;
      
    
    </summary>
    
    
      <category term="论文阅读" scheme="http://yoursite.com/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="cls." scheme="http://yoursite.com/tags/cls/"/>
    
      <category term="seg." scheme="http://yoursite.com/tags/seg/"/>
    
  </entry>
  
  <entry>
    <title>论文阅读(1)--PointNet</title>
    <link href="http://yoursite.com/2020/01/27/pointNet/"/>
    <id>http://yoursite.com/2020/01/27/pointNet/</id>
    <published>2020-01-27T09:17:15.000Z</published>
    <updated>2020-01-27T12:11:10.790Z</updated>
    
    <content type="html"><![CDATA[<p>论文链接：<a href="http://openaccess.thecvf.com/content_cvpr_2017/papers/Qi_PointNet_Deep_Learning_CVPR_2017_paper.pdf" target="_blank" rel="noopener">PointNet: Deep Learning on Point Sets for 3D Classification and Segmentation</a></p><p>代码：<a href="https://github.com/charlesq34/pointnet" target="_blank" rel="noopener">tensroflow</a> <a href="https://github.com/fxia22/pointnet.pytorch" target="_blank" rel="noopener">pytorch</a> </p><h1 id="1-摘要"><a href="#1-摘要" class="headerlink" title="1. 摘要"></a>1. 摘要</h1><p>点云是几何数据结构的一种重要类型，由于它的格式不规则，大多数研究人员将这种数据转换成规则的三维体素栅格或者多幅图像的集合来进行处理。但是，这种方式会增加不必要的数据量并且导致一些问题。</p><p>在本文中，设计了一种可以直接处理点云的新型神经网络，该网络很好的考虑的点云输入的排列不变性，将该网络命名为PointNet。PointNet为目标检测、部分分割、场景语义解析等应用提供了一种统一的结构。尽管很简单，PointNet非常的高效和有效。从实验上，它表现出与start-of-the-art同等强大或更优的性能；从理论上，本文分析了该网络学到了什么以及为何该网络对输入的扰动和破坏具有鲁棒性。</p><h1 id="2-网络结构"><a href="#2-网络结构" class="headerlink" title="2. 网络结构"></a>2. 网络结构</h1><p><img src="/2020/01/27/pointNet/image-20200127160355226.png" alt="image-20200127160355226"></p><p>整体网络结构如图所示，由三个关键模块组成：</p><ul><li>最大池化层，作为对称的函数来从所有点中生成信息。</li></ul><p><img src="/2020/01/27/pointNet/image-20200127161302928.png" alt="image-20200127161302928"></p><p>​     为了使模型对输入点的排列具有不变性，有三种不同的策略：1）对输入按照某种规则进行排序；2）将所有可能的排列作为一个序列进行输入，训练一个RNN; 3）使用一个具有对称性的函数</p><p>​     本文中使用了第三种策略，采用了一个最大池化层对所有点的每个维度进行最大池化处理，生成与输入顺序无关的全局特征。</p><ul><li>一个局部和全局信息组合的结构(用于seg)</li></ul><p><img src="/2020/01/27/pointNet/image-20200127161520979.png" alt="image-20200127161520979"></p><p>​        在计算出全局特征向量后，在每个点的局部特征之后加上该特征向量生成新的特征，可以使每个点既有局部信息又有全局信息。</p><ul><li>对齐网络分别用于对齐输入点云和特征(T-Net)</li></ul><p><img src="/2020/01/27/pointNet/image-20200127161636465.png" alt="image-20200127161636465"></p><p>​     使用一个迷你网络(T-Net)来预测一个仿射变换，然后直接将该变换应用到输入点的坐标。同理，对于提取出的特征，也可以用网络学习一个更高维度的变换矩阵，并约束该矩阵为正交矩阵。</p><h1 id="3-实验"><a href="#3-实验" class="headerlink" title="3. 实验"></a>3. 实验</h1><h2 id="3-1-3D-目标分类"><a href="#3-1-3D-目标分类" class="headerlink" title="3.1 3D 目标分类"></a>3.1 3D 目标分类</h2><p>数据集：ModelNet40 shape classification benchmark。12311个CAD模型共40类，9843用于训练，2468用于测试。</p><p><img src="/2020/01/27/pointNet/image-20200127163950411.png" alt="image-20200127163950411"></p><h2 id="3-2-3D物体部分分割"><a href="#3-2-3D物体部分分割" class="headerlink" title="3.2 3D物体部分分割"></a>3.2 3D物体部分分割</h2><p>数据集：ShapeNet part data.16个类别的16881个形状，总共有50个部分的标注，大多数类别的物体标注了2-5个部分。</p><p><img src="/2020/01/27/pointNet/image-20200127164351963.png" alt="image-20200127164351963"></p><h2 id="3-3-场景语义分割"><a href="#3-3-场景语义分割" class="headerlink" title="3.3 场景语义分割"></a>3.3 场景语义分割</h2><p>数据集：Stanford 3D semantic parsing dataset.27个房间6个区域的3D扫描点，共有13个类别的语义类别。</p><p><img src="/2020/01/27/pointNet/image-20200127164639253.png" alt="image-20200127164639253"></p><p><img src="/2020/01/27/pointNet/image-20200127164650996.png" alt="image-20200127164650996"></p><p><img src="/2020/01/27/pointNet/image-20200127164701888.png" alt="image-20200127164701888"></p><h2 id="3-4-时空复杂度"><a href="#3-4-时空复杂度" class="headerlink" title="3.4 时空复杂度"></a>3.4 时空复杂度</h2><p><img src="/2020/01/27/pointNet/image-20200127164847958.png" alt="image-20200127164847958"></p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>本文的工作提出了一种新颖的直接输入点云的网络结构，为多种三维任务提供了统一的方法，取得了较好的结果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;论文链接：&lt;a href=&quot;http://openaccess.thecvf.com/content_cvpr_2017/papers/Qi_PointNet_Deep_Learning_CVPR_2017_paper.pdf&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
    
      <category term="论文阅读" scheme="http://yoursite.com/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="cls." scheme="http://yoursite.com/tags/cls/"/>
    
      <category term="seg." scheme="http://yoursite.com/tags/seg/"/>
    
      <category term="det." scheme="http://yoursite.com/tags/det/"/>
    
  </entry>
  
</feed>
